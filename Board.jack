// functions and methods for Board datatype, an array of Squares 
class Board {
  // b is a 144 length array of Squares representing game board
  field Array b;

  // creates new board
  constructor Board new() {
    let b = Board.init();
    
    // if 69 is selected as RNG seed, place selected number of mines from
    // 0th to Main.mines_left'th square on board
    if (Maths.getSeed() = 69) {
      do placeTestMines();
    }
    else {
      do placeMines();
    }

    do adjacentMines();
    do draw();
    return this;
  }
  
  // populates 144 length array with squares. 
  function Board init() {
    var int i;
    var int x_cord;
    var int y_cord;
    var Array board;

    let i = 0;
    let board = Array.new(144);

    while (i < 144) {
      let x_cord = (136 + (20 * (Maths.mod(i, 12))));
      let y_cord = (8 + (20 * (i / 12)));
      let board[i] = Square.new(x_cord, y_cord);
      let i = (i +1);
    }

    return board;
  } 

  // randomly places Main.mines_left mines on board
  method void placeMines() {
    var int i ;
    var int rand;
    var boolean n;
    var Square current;

    let i = 0;
    let rand = 0;
    let n = false;

    while (i < Main.getMinesLeft()) {
      // let rand = Maths.randRange(143);
      let rand = Maths.mod(Maths.rand(), 144);
      if (n) {
        let rand = Maths.mod((rand+Maths.randRange(144)), 144);
        let n = false;
      }
      if (~n) {
        let rand = Maths.mod((rand+Maths.randRange(69)), 144);
        let n = true;
      }
      let current = b[rand];
      // Only place mine if square is empyty
      if (~ current.getMine()) {
        do current.setMine();
        let i = (i + 1);
      }   
    }
    return;
  }

  // places mines from 0th to mines_left'th square for testing
  method void placeTestMines() {
    var int i;
    var Square current;

    let i = 0;

    while (i < Main.getMinesLeft()) {
      let current = b[i];
      do current.setMine();
      let i = (i + 1);
    }
    return;
  }

  // Sets adjacement mines field for each square
  method void adjacentMines() {
    // mines in adjacent squares
    var int mine_count;
    // square indices for surrounding squares
    var int ul, um, ur, ml, mr, ll, lm, lr;
    // board[i]'s row
    var int cr;
    //current square
    var int i; 
    var Square current;
    let i = 0;
    
    while (i < 144) {
      let mine_count = 0; 
      let cr = (i / 12);
      // initialize indices for current square
      let ul = (i - 13); let um = (i - 12); let ur = (i - 11);
      let ml = (i - 1); let mr = (i + 1);
      let ll = (i + 11); let lm = (i + 12); let lr = (i + 13);
      
      //if square is adjacent to current and has a mine increment mine_count
      if ((ul > -1) & ((ul / 12) = (cr - 1))) {
        let current = b[ul];
        if (current.getMine()) {let mine_count = (mine_count + 1);}
      }
      if (um > -1) {
        let current = b[um];
        if (current.getMine()) {let mine_count = (mine_count + 1);}
      }
      if ((ur > -1) & ((ul / 12) = (cr - 1))) {
        let current = b[ur];
        if (current.getMine()) {let mine_count = (mine_count + 1);}
      }
      if ((ml / 12) = cr) {
        let current = b[ml];
        if (current.getMine()) {let mine_count = (mine_count + 1);}
      }
      if ((mr / 12) = cr) {
        let current = b[mr];
        if (current.getMine()) {let mine_count = (mine_count + 1);}
      }
      if ((ll < 144) & ((ll / 12) = (cr + 1))) {
        let current = b[ll];
        if (current.getMine()) {let mine_count = (mine_count + 1);}
      }
      if (lm < 144) {
        let current = b[lm];
        if (current.getMine()) {let mine_count = (mine_count + 1);}
      }
      if ((lr < 144) & ((lr / 12) = (cr + 1))) {
        let current = b[lr];
        if (current.getMine()) {let mine_count = (mine_count + 1);}
      }

      //set adjacent_mines
      let current = b[i];
      do current.setAdjacentMines(mine_count);
      let i = (i + 1);
    }
    return;
  }

  // draws this board on screen
  method void draw() {
    var int i;
    var int cursor;
    var Square current;
    var int x;
    var int y;

    let i = 0;
    let cursor = Main.getCursor();

    while (i < 144) {
      let current = b[i];
      let x = current.getX();
      let y = current.getY();

      do Board.chooseDraw(x, y, i, cursor, current);

      let i = (i + 1);
    }
    return;
  }
  
  // draws clicked mine
  method void clickedMine() {
    var Square current;
    var int cursor;
    var int x;
    var int y;
    
    let cursor = Main.getCursor();
    let current = b[cursor];

    let x = current.getX();
    let y = current.getY();

    do Draw.clickedMine(x, y);
    return;
  }

  // choose correct draw function and call it
  function void chooseDraw(int x, int y, int i, int cursor, Square current) {
      if (i = cursor) {
        do Draw.cursor(x, y);
        return;
      }
      if (current.getFlagged()) {
        do Draw.flagged(x, y);
        return;
      }
      if (~(current.getClicked())) {
        do Draw.unclicked(x, y);
        return;
      }
      if (current.getClicked() & current.getMine()) {
        do Draw.mine(x, y);
        return;
      }  
      if ((current.getClicked()) & (current.getAdjacentMines() = 1)) {
        do Draw.one(x, y);
        return;
      }
      if ((current.getClicked()) & (current.getAdjacentMines() = 2)) {
        do Draw.two(x, y);
        return;
      }
      if ((current.getClicked()) & (current.getAdjacentMines() = 3)) {
        do Draw.three(x, y);
        return;
      }
      if ((current.getClicked()) & (current.getAdjacentMines() = 4)) {
        do Draw.four(x, y);
        return;
      }
      if ((current.getClicked()) & (current.getAdjacentMines() = 5)) {
        do Draw.five(x, y);
        return;
      }
      if ((current.getClicked()) & (current.getAdjacentMines() = 6)) {
        do Draw.six(x, y);
        return;
      }
      if ((current.getClicked()) & (current.getAdjacentMines() = 7)) {
        do Draw.seven(x, y);
        return;
      }
      if ((current.getClicked()) & (current.getAdjacentMines() = 8)) {
        do Draw.eight(x, y);
        return;
      }
      if (current.getClicked()) {
        do Draw.clicked(x, y);
      }
      return;
    }

  // click all squares
  method void clickAll() {
    var Square current;
    var int i, x, y;

    let i = 0;
    while (i < 144) {
      let current = b[i];
      let x = current.getX();
      let y = current.getY();
      do Draw.clear(x,y);
      do current.setClicked();
      let i = (i + 1);
    }
    return;
  }

  // move cursor
  function void moveCursor(int k) {
    var int cursor;
    let cursor = Main.getCursor();

    if ((k = 130) & (cursor = 0)) {
      do Main.setCursor(143);
      return;
    }
    if (k = 130) {
      do Main.setCursor(cursor-1);
      return;
    }
    if ((k = 131) & (cursor < 12)) {
      do Main.setCursor(cursor+132);
      return;
    }
    if (k = 131) {
      do Main.setCursor(cursor-12);
      return;
    }
    if ((k = 132) & (cursor = 143)) {
      do Main.setCursor(0);
      return;
    }
    if (k = 132) {
      do Main.setCursor(cursor+1);
      return;
    }
    if ((k = 133) & (cursor > 131)) {
      do Main.setCursor(cursor-132);
      return;
    }
    if (k = 133) {
      do Main.setCursor(cursor+12);
      return;
    }
    return;
  }
  
  // calls Square.click for current cursor
  method void click() {
    var int cursor;
    var Square current;

    let cursor = Main.getCursor();
    let current = b[cursor];

    do current.click();
    return;
  }

  // calls Square.flag for current cursor
  method void flag() {
    var int cursor;
    var Square current;
    
    let cursor = Main.getCursor();
    let current = b[cursor];

    do current.flag();
    return;
  }
}